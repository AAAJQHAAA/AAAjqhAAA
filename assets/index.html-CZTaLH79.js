import{_ as i,c as l,a,o as t}from"./app-CiQOVv9k.js";const o={};function n(r,e){return t(),l("div",null,e[0]||(e[0]=[a(`<ul><li><p>https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API</p></li><li><p>可以用来做什么？</p><ul><li>音频可视化、音频数据处理、播放音频</li></ul></li><li><p>工作流程？</p><ul><li>核心是【音频上下文对象】<code>AudioContext</code></li><li>通过【音频上下文对象】将一个或多个【音频源节点】分别连接到不同的【音频处理节点】</li><li>最终连接到【输出节点】进行播放声音</li><li>音频上下文（音频源节点---&gt;音频处理节点---&gt;音频处理节点---&gt;音频输出终点）</li></ul></li><li><p>音频数据是什么？</p><ul><li>音频信号（声波）采样（连续时间信号-&gt;离散时间信号-&gt;计算机处理）<a href="https://en.wikipedia.org/wiki/Sampling_%28signal_processing%29" target="_blank" rel="noopener noreferrer">维基百科</a></li><li>音频数据就是采样的样本中的数据</li></ul></li><li><p>音频缓冲区<code>AudioBuffer</code></p><ul><li>某段时间存储在内存中的数据</li><li>格式编码：非交错IEEE754 32位线性PCM（32位浮点缓冲区），标称范围在-1和+1之间</li></ul></li><li><p>人耳听觉范围是<code>20hz~20000hz</code></p></li><li><p>js中的Float32Array、是啥？？？</p></li></ul><h1 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h1><p>pcm编码中几个比较重要的概念</p><ul><li>采样率sampleRate（Hz）：audioContext.sampleRate（浏览器的采样率是不可更改的）</li><li>位深（bits）： <ul><li>常见的有8位和16位（二进制位数）：</li><li>8位二进制表示的数字：2^8=256，对应PCM范围是0-255。</li><li>16位二进制表示的数字：2^16=65536，对应PCM范围是-32768到32767。</li><li>1字节（Byte）= 8位（bit）</li><li>注意：浏览器API获取的pcm数据是非交错的32位线性PCM，这些数据都是在[-1,1]之间的 <ul><li>如果要转成8位的数据，负数<em>128，正数</em>127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。</li><li>如果要转成16位的数据，只需要对负数<em>32768,对正数</em>32767即可。</li></ul></li></ul></li><li>声道channel <ul><li>每个声道的采样样本在一个数组中</li><li>注意：浏览器的获取的音频数据的通道可能有两个，也可能只有一个 <ul><li>我们录音只取一个通道的数据就行了</li></ul></li></ul></li></ul><h1 id="转换步骤说明" tabindex="-1"><a class="header-anchor" href="#转换步骤说明"><span>转换步骤说明</span></a></h1><pre><code>- H5 Audio API提供了两种音频数据处理节点，AudioWorkletNode、ScriptProcessorNode(MDN上提示将被淘汰)
- 1.API录音过程中的片段区别
    - AudioWorkletNode每次固定128个采样点触发一次process方法
    - ScriptProcessorNode可以自定义多少个采样点触发一次onaudioprocess事件
    - 录音结束后我们将所有采样点都放进一个数组（decompress()方法作用）
    - 最终获取的是pcm【-1，1】的采样点数组
- 2.采样率的转换
    - 因为浏览器API的采样率是不可更改的（每个浏览器可能不一样audioContext.sampleRate）
    - 所以我们需要将采样率转化为目标采样率
    - 例如：浏览器采样率位44100Hz，我们却需要16000Hz的
        - 44100Hz表示1秒钟采集44100个采样点
        - 16000Hz表示1秒钟采集16000个采样点
        - 我们用浏览器获取的pcm采样数组（pcm【-1，1】），44100个数据代表1s
        - 所以需要减少采样点44100/16000约=3（减少比例），表示每三个相邻的采样点只需要取一个
        - changeSampleBuffer()方法的作用：改变采样率（改变采样点个数）
- 3.采样点数组转byte数组（文件中存储的是二进制，所以要转化，这就和位深密切相关了）（pcmToByteDateArr()方法的作用）
    - 上一步获取的是还是pcm采样点数组（pcm【-1，1】）
    - 如果是用8位存储一个采样点，则把每个pcm采样点【-1，1】的数据转为【0,255】，然后存储到1byte即可
        - 1byte=8位，所以1byte就是一个采样点
    - 如果是用16位存储一个采样点，则把每个pcm采样点【-1，1】的数据转为【-32768,32767】，然后存储到2byte即可
        - 2byte=16位，所以2byte才是一个采样点
    - 最终得到的byte数组就是pcm编码过后的最终pcm数据
- 4.获取到的pcm编码数据如何播放？
    - 添加wav头信息就可以了（encodeWAV()方法作用）
    - wav头信息有44个字节
</code></pre>`,6)]))}const c=i(o,[["render",n],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/article/ahj33ic5/","title":"Web Audio API","lang":"zh-CN","frontmatter":{"title":"Web Audio API","createTime":"2024/03/01 15:46:45","tags":["Web Audio API"],"permalink":"/article/ahj33ic5/"},"headers":[],"readingTime":{"minutes":3.41,"words":1024},"git":{"updatedTime":1737255104000,"contributors":[{"name":"jqh","username":"jqh","email":"1789622669@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/e51d6bd9179d8251507631920dbee86805db2675024268e3d9894ba170e9c314?d=retro"}]},"filePathRelative":"2024/前端/webMedia/WebAudioAPI/webAudioApi.md","categoryList":[{"id":"07811d","sort":10001,"name":"2024"},{"id":"d1a041","sort":10007,"name":"前端"},{"id":"e77e4c","sort":10013,"name":"webMedia"},{"id":"21949c","sort":10023,"name":"WebAudioAPI"}],"bulletin":false}');export{c as comp,p as data};
