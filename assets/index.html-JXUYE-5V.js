import{_ as s,c as a,a as i,o as e}from"./app-CiQOVv9k.js";const l={};function p(d,n){return e(),a("div",null,n[0]||(n[0]=[i(`<ul><li><code>node：os</code>模块提供与操作系统相关的实用程序方法和属性</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>declare module &quot;os&quot; {</span></span>
<span class="line"><span>    interface CpuInfo {</span></span>
<span class="line"><span>        model: string;</span></span>
<span class="line"><span>        speed: number;// 以兆赫为单位</span></span>
<span class="line"><span>        times: {</span></span>
<span class="line"><span>            user: number;// 在用户模式下花费的毫秒数</span></span>
<span class="line"><span>            nice: number;// 在良好模式下花费的毫秒数</span></span>
<span class="line"><span>            sys: number;// 在系统模式下花费的毫秒数</span></span>
<span class="line"><span>            idle: number;// 在空闲模式下花费的毫秒数</span></span>
<span class="line"><span>            irq: number;// 在中断请求模式下花费的毫秒数</span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    interface NetworkInterfaceBase {</span></span>
<span class="line"><span>        address: string;// 分配的 IPv4 或 IPv6 地址</span></span>
<span class="line"><span>        netmask: string;// IPv4 或 IPv6 网络掩码</span></span>
<span class="line"><span>        mac: string;// 网络接口的 MAC 地址</span></span>
<span class="line"><span>        internal: boolean;// true 如果网络接口是环回接口或不可远程访问的类似接口；否则 false</span></span>
<span class="line"><span>        cidr: string | null;// 使用 CIDR 表示法的路由前缀分配的 IPv4 或 IPv6 地址。如果 netmask 无效，则此属性设置为 null</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    interface NetworkInterfaceInfoIPv4 extends NetworkInterfaceBase {</span></span>
<span class="line"><span>        family: &quot;IPv4&quot;;</span></span>
<span class="line"><span>        scopeid?: undefined;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    interface NetworkInterfaceInfoIPv6 extends NetworkInterfaceBase {</span></span>
<span class="line"><span>        family: &quot;IPv6&quot;;</span></span>
<span class="line"><span>        scopeid: number;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    interface UserInfo&lt;T&gt; {</span></span>
<span class="line"><span>        username: T;</span></span>
<span class="line"><span>        uid: number;</span></span>
<span class="line"><span>        gid: number;</span></span>
<span class="line"><span>        shell: T | null;</span></span>
<span class="line"><span>        homedir: T;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    type NetworkInterfaceInfo = NetworkInterfaceInfoIPv4 | NetworkInterfaceInfoIPv6;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 以字符串形式返回操作系统的主机名。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function hostname(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回包含1、5和15分钟负载平均值的数组。</span></span>
<span class="line"><span>     * 平均负载是由操作系统计算的系统活动的度量，并表示为分数。</span></span>
<span class="line"><span>     * 平均负载是Unix特有的概念。在Windows上，返回值总是\`[0，0，0]\`。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function loadavg(): number[];</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 以秒数为单位返回系统时钟。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function uptime(): number;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回整数形式的可用系统内存量（以字节为单位）。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function freemem(): number;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 以整数形式返回系统内存的总字节数。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function totalmem(): number;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回包含每个逻辑CPU内核信息的对象数组。如果没有可用的CPU信息，例如\`/proc\`文件系统不可用，则数组将为空。</span></span>
<span class="line"><span>     * “nice”值是POSIX专有的。在Windows上，所有处理器的nice值始终为0。</span></span>
<span class="line"><span>     * \`os.cpus（）.length\`不应用于计算应用程序可用的并行度。使用{@link availableclassificism}实现此目的。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function cpus(): CpuInfo[];</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回程序应使用的默认并行的估计值。总是返回一个大于零的值。</span></span>
<span class="line"><span>     * 是libuv函数的封装[\`uv_available_parallelism()\`](https://docs.libuv.org/en/v1.x/misc.html#c.uv_available_parallelism).</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function availableParallelism(): number;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回的操作系统名称 [\`uname(3)\`](https://linux.die.net/man/3/uname). </span></span>
<span class="line"><span>     * 例如，它在Linux上返回“Linux”，在macOS上返回“Darwin &quot;，在Windows上返回”Windows_NT“。</span></span>
<span class="line"><span>     * </span></span>
<span class="line"><span>     * 有关在各种操作系统上运行 [\`uname(3)\`](https://linux.die.net/man/3/uname) 的输出的其他信息，请参见[https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples)。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function type(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 以字符串形式返回操作系统版本。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 在POSIX系统上，操作系统版本是通过调用[\`uname(3)\`](https://linux.die.net/man/3/uname).</span></span>
<span class="line"><span>     * 在Windows上，使用\`GetVersionExW（）\`。请参见[https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) </span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function release(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回一个对象，该对象包含已分配网络地址的网络接口。</span></span>
<span class="line"><span>     * 返回对象上的每个键标识一个网络接口。关联的值是一个对象数组，每个对象描述一个分配的网络地址。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function networkInterfaces(): NodeJS.Dict&lt;NetworkInterfaceInfo[]&gt;;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回当前用户主目录的字符串路径。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 在POSIX上，如果定义了环境变量，则使用\`$HOME\`。否则，它使用[effective UID](https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID)查找用户的主目录。</span></span>
<span class="line"><span>     * </span></span>
<span class="line"><span>     * 在Windows上，它使用\`USERPROFILE\`环境变量（如果已定义）。否则，它使用当前用户的配置文件目录的路径。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function homedir(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回有关当前有效用户的信息。</span></span>
<span class="line"><span>     * 在POSIX平台上，这通常是密码文件的子集。</span></span>
<span class="line"><span>     * 返回的对象包括\`username\`, \`uid\`, \`gid\`, \`shell\`, and \`homedir\`. On Windows, the \`uid\` and\`gid\` fields are \`-1\`, and \`shell\` is \`null\`.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * \`os.userInfo（）\`返回的\`homedir\`的值由操作系统提供。</span></span>
<span class="line"><span>     * 这与\`os.homedir（）\`的结果不同，后者在返回操作系统响应之前查询环境变量以获得主目录。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 如果用户没有“username”或“homedir”，则抛出“SystemError”。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function userInfo(options: { encoding: &quot;buffer&quot; }): UserInfo&lt;Buffer&gt;;</span></span>
<span class="line"><span>    function userInfo(options?: { encoding: BufferEncoding }): UserInfo&lt;string&gt;;</span></span>
<span class="line"><span>    type SignalConstants = {</span></span>
<span class="line"><span>        [key in NodeJS.Signals]: number;</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 空设备的特定于平台的文件路径</span></span>
<span class="line"><span>     * Windows 上是 \\\\.\\nul</span></span>
<span class="line"><span>     * POSIX 上是 /dev/null</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    const devNull: string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作系统特定的行尾标记</span></span>
<span class="line"><span>     * POSIX 上是 \\n</span></span>
<span class="line"><span>     * Windows 上是 \\r\\n</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    const EOL: string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回为其编译 Node.js 二进制文件的操作系统 CPU 架构</span></span>
<span class="line"><span>     * 可能的值有：&#39;arm &#39;\`、&#39;arm64&#39;\`、&#39;ia32 &#39;\`、&#39;loong64&#39;\`、&#39;mips &#39;\`、&#39;mipsel&#39;\`、&#39;ppc &#39;\`、&#39;ppc64&#39;\`、&#39;riscv64 &#39;\`、&#39;s390&#39;\`、&#39;s390x &#39;\`和&#39;x64&#39;\`。</span></span>
<span class="line"><span>     * 返回值相当于\`process.arch\`。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function arch(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回标识内核版本的字符串</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 在POSIX系统上，操作系统版本是通过调用[\`uname(3)\`](https://linux.die.net/man/3/uname). </span></span>
<span class="line"><span>     * 在Windows上，使用\`RtlGetVersion（）\`，如果它不可用，则使用\`GetVersionExW（）\`</span></span>
<span class="line"><span>     * 详情[https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples)</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function version(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回一个字符串，标识编译Node.js二进制文件的操作系统平台。该值在编译时设置。可能的值有：“aix &quot;、”darwin&quot;、“freebsd &quot;、”linux&quot;、“openbsd &quot;、”sunos&quot;和“win32 &quot;。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 返回值相当于\`process.platform\`。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 如果Node.js是在Android操作系统上构建的，也可能返回值“android”。 [Android support is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function platform(): NodeJS.Platform;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 以字符串形式返回机器类型，例如\`arm\`、\`arm64\`、\`aarch64\`、\`mips\`、\`mips64\`、\`ppc64\`、\`ppc64le\`、\`s390\`、\`s390x\`、\`i386\`、\`i686\`、\`x86_64\`。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 在POSIX系统上，机器类型是通过调用[\`uname(3)\`](https://linux.die.net/man/3/uname). </span></span>
<span class="line"><span>     * 在Windows上，使用\`RtlGetVersion（）\`，如果它不可用，则使用\`GetVersionExW（）\`。</span></span>
<span class="line"><span>     * See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function machine(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 以字符串形式返回临时文件的操作系统默认目录。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function tmpdir(): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回一个字符串，标识编译Node.js二进制文件的CPU的字节序</span></span>
<span class="line"><span>     * 可能的值是表示大端的“BE”和表示小端的“LE &quot;。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function endianness(): &quot;BE&quot; | &quot;LE&quot;;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回由\`pid\`指定进程的调度优先级。如果没有提供pid或者pid为0，则返回当前进程的优先级。</span></span>
<span class="line"><span>     * @param [pid=0] 要检索其调度优先级的进程ID。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function getPriority(pid?: number): number;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 尝试为\`pid\`指定的进程设置调度优先级。如果\`pid\`未提供或为\`0\`，则使用当前进程的进程ID。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * “优先级”输入必须是一个介于“-20”（高优先级）和“19”（低优先级）之间的整数。</span></span>
<span class="line"><span>     * 由于Unix和Windows之间的优先级不同，</span></span>
<span class="line"><span>     * 优先级类，\`priority\`被映射到\`os.constants.priority\`中的六个优先级常量之一。映射可能会导致返回值在Windows上略有不同。</span></span>
<span class="line"><span>     * 为避免混淆，请将“priority”设置为优先级常量之一。</span></span>
<span class="line"><span>     * </span></span>
<span class="line"><span>     * 在Windows上，将优先级设置为“PRIORITY_HIGHEST”需要提升用户权限。否则，设置的优先级将被无声地降低到“PRIORITY_HIGH”</span></span>
<span class="line"><span>     * @param [pid=0] 要为其设置调度优先级的进程ID。</span></span>
<span class="line"><span>     * @param priority 分配给进程的调度优先级。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    function setPriority(priority: number): void;</span></span>
<span class="line"><span>    function setPriority(pid: number, priority: number): void;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h1><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>const os = require(&#39;node:os&#39;);</span></span>
<span class="line"><span>// console.log(os.EOL)// 操作系统特定的行尾标记</span></span>
<span class="line"><span>// console.log(os.availableParallelism())// 并发估值</span></span>
<span class="line"><span>// console.log(os.arch())// cpu</span></span>
<span class="line"><span>// console.log(os.constants)// 操作系统特定常量值</span></span>
<span class="line"><span>// console.log(os.cpus())// CPU内核信息的对象数组</span></span>
<span class="line"><span>// console.log(os.devNull)// 空设备的特定于平台的文件路径</span></span>
<span class="line"><span>// console.log(os.endianness())// CPU 的字节序</span></span>
<span class="line"><span>// console.log(os.freemem())// 空闲的系统内存量</span></span>
<span class="line"><span>// console.log(os.getPriority())// 指定进程的调度优先级</span></span>
<span class="line"><span>// console.log(os.homedir())// 当前用户的主目录的字符串路径</span></span>
<span class="line"><span>// console.log(os.hostname())// 操作系统的主机名</span></span>
<span class="line"><span>// console.log(os.loadavg())// 返回包含 1、5 和 15 分钟平均负载的数组</span></span>
<span class="line"><span>// console.log(os.machine())// 返回机器类型</span></span>
<span class="line"><span>// console.log(os.networkInterfaces())// 返回包含已分配网络地址的网络接口的对象</span></span>
<span class="line"><span>// console.log(os.platform())// 操作系统平台的字符串</span></span>
<span class="line"><span>// console.log(os.release())// 操作系统版本</span></span>
<span class="line"><span>// console.log(os.setPriority())// 设置进程调度优先级</span></span>
<span class="line"><span>// console.log(os.tmpdir())// 操作系统默认目录</span></span>
<span class="line"><span>// console.log(os.totalmem())// 系统内存的总字节数</span></span>
<span class="line"><span>// console.log(os.type())// 操作系统名称</span></span>
<span class="line"><span>// console.log(os.uptime())// 以秒为单位返回系统正常运行时间</span></span>
<span class="line"><span>// console.log(os.userInfo())// 用户信息</span></span>
<span class="line"><span>console.log(os.version())// 系统内核版本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const v=s(l,[["render",p],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/ydelyafr/","title":"020os","lang":"zh-CN","frontmatter":{"title":"020os","createTime":"2024/03/17 08:35:35","permalink":"/article/ydelyafr/"},"headers":[],"readingTime":{"minutes":6.57,"words":1972},"git":{"updatedTime":1737255104000,"contributors":[{"name":"jqh","username":"jqh","email":"1789622669@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/e51d6bd9179d8251507631920dbee86805db2675024268e3d9894ba170e9c314?d=retro"}]},"filePathRelative":"2024/前端/node/020os.md","categoryList":[{"id":"07811d","sort":10001,"name":"2024"},{"id":"d1a041","sort":10007,"name":"前端"},{"id":"9e26c9","sort":10011,"name":"node"}],"bulletin":false}');export{v as comp,r as data};
