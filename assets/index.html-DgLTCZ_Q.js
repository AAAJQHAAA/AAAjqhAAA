import{_ as n,c as a,a as i,o as l}from"./app-CiQOVv9k.js";const e={};function p(d,s){return l(),a("div",null,s[0]||(s[0]=[i(`<ul><li><code>node：path</code>模块提供了用于处理文件和目录路径的实用程序</li></ul><h1 id="parsedpath" tabindex="-1"><a class="header-anchor" href="#parsedpath"><span>ParsedPath</span></a></h1><ul><li>由path.parse()生成或由path.format()使用的已解析路径对象。</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>interface ParsedPath {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 路径的根，如&#39;/&#39; or &#39;c:\\&#39;</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    root: string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 完整目录路径，如 &#39;/home/user/dir&#39; or &#39;c:\\path\\dir&#39;</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    dir: string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 文件名包括扩展名（如果有），如“index.html”</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    base: string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 文件扩展名（如果有），如“.html”</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    ext: string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 不带扩展名的文件名（如果有），如“index”</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    name: string;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="formatinputpathobject" tabindex="-1"><a class="header-anchor" href="#formatinputpathobject"><span>FormatInputPathObject</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>interface FormatInputPathObject {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 路径的根，如 &#39;/&#39; or &#39;c:\\&#39;</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    root?: string | undefined;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 完整目录路径，如 &#39;/home/user/dir&#39; or &#39;c:\\path\\dir&#39;</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    dir?: string | undefined;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 文件名包括扩展名（如果有），如“index.html”</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    base?: string | undefined;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 文件扩展名（如果有），如“.html”</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    ext?: string | undefined;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 不带扩展名的文件名（如果有），如“index”</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    name?: string | undefined;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="platformpath" tabindex="-1"><a class="header-anchor" href="#platformpath"><span>PlatformPath</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>interface PlatformPath {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 规范化给定的 path，解析 &#39;..&#39; 和 &#39;.&#39; 片段</span></span>
<span class="line"><span>     * 当发现多个斜杠时，它们将被替换为单个斜杠;</span></span>
<span class="line"><span>     * 当路径包含尾随斜杠时，它将被保留。在Windows上使用反斜杠</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param path 路径</span></span>
<span class="line"><span>     * @throws {TypeError} 如果path不是字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    normalize(path: string): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将所有参数连接在一起并规范化结果路径。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param paths 路径</span></span>
<span class="line"><span>     * @throws {TypeError} 如果任何参数不是字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    join(...paths: string[]): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 将路径或路径片段的序列解析为绝对路径</span></span>
<span class="line"><span>     * </span></span>
<span class="line"><span>     * 最右边的参数被认为是{to}。其他参数被认为是{from}的数组。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 从最左边的{from}参数开始，将{to}解析为绝对路径。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 如果{to}还不是绝对路径，{from}参数将按从右到左的顺序前置，直到找到绝对路径。</span></span>
<span class="line"><span>     * 如果在使用所有{from}路径后仍然没有找到绝对路径，则也使用当前工作目录。</span></span>
<span class="line"><span>     * 生成的路径将被规范化，除非路径被解析为根目录，否则尾随的斜杠将被删除。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param paths 路径或路径片段的序列</span></span>
<span class="line"><span>     * @throws {TypeError} 如果任何参数不是字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    resolve(...paths: string[]): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 确定 path 是否为绝对路径。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 如果给定的{path}是零长度字符串，则返回\`false\`。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param path 路径</span></span>
<span class="line"><span>     * @throws {TypeError} 如果path不是字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    isAbsolute(path: string): boolean;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 根据当前工作目录返回从 from 到 to 的相对路径</span></span>
<span class="line"><span>     * 有时我们有两条绝对路径，我们需要推导出从一条到另一条的相对路径。这实际上是path.resolve的反向转换。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @throws {TypeError} 如果“from”或“to”不是字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    relative(from: string, to: string): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回 path 的目录名，类似于 Unix dirname 命令</span></span>
<span class="line"><span>     * </span></span>
<span class="line"><span>     * @param path 路径</span></span>
<span class="line"><span>     * @throws {TypeError} 如果path不是字符串</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    dirname(path: string): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回 path 的最后一部分，类似于 Unix basename 命令</span></span>
<span class="line"><span>     * 通常用于从完全限定路径中提取文件名。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param path 路径</span></span>
<span class="line"><span>     * @param suffix 要删除的可选后缀</span></span>
<span class="line"><span>     * @throws {TypeError} 如果\`path\`不是一个字符串，或者如果给出了\`ext\`，但它不是一个字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    basename(path: string, suffix?: string): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 返回 path 的扩展名，即 path 的最后一部分中从最后一次出现的 .（句点）字符到字符串的结尾。</span></span>
<span class="line"><span>     * 如果 path 的最后一部分中没有 .，或者除了 path 的基本名称（参见 path.basename()）的第一个字符之外没有 . 个字符，则返回空字符串</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param path 路径</span></span>
<span class="line"><span>     * @throws {TypeError} 如果path不是字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    extname(path: string): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 特定于平台的文件分隔符。 &#39;\\\\&#39; or &#39;/&#39;.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    readonly sep: &quot;\\\\&quot; | &quot;/&quot;;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 提供特定于平台的路径定界符 &#39;;&#39; or &#39;:&#39;.例如：环境变量的定界符</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    readonly delimiter: &quot;;&quot; | &quot;:&quot;;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 从路径字符串返回一个对象-与format()相反。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param path 路径</span></span>
<span class="line"><span>     * @throws {TypeError} 如果path不是字符串。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    parse(path: string): ParsedPath;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 从对象返回路径字符串-与parse()相反。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param pathObject 路径</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    format(pathObject: FormatInputPathObject): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 仅在 Windows 系统上，返回给定 path 的等效 命名空间前缀路径。如果 path 不是字符串，则 path 将不加修改地返回</span></span>
<span class="line"><span>     * 此方法仅在Windows系统上有意义。在POSIX系统中，该方法是不可操作的，并且总是返回路径而不进行修改。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    toNamespacedPath(path: string): string;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 提供对 path 方法的 POSIX 特定实现的访问</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    readonly posix: PlatformPath;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 提供对 path 方法的 Windows 特定实现的访问</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    readonly win32: PlatformPath;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>const path = require(&#39;node:path&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 返回最后一部分</span></span>
<span class="line"><span>// console.log(path.posix.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;));// &#39;quux.html&#39;</span></span>
<span class="line"><span>// 返回最后一部分去除后缀</span></span>
<span class="line"><span>// console.log(path.posix.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;, &#39;.html&#39;));// &#39;quux&#39;</span></span>
<span class="line"><span>// console.log(path.win32.basename(&#39;C:\\\\foo.html&#39;, &#39;.html&#39;));// &#39;foo&#39;</span></span>
<span class="line"><span>// console.log(path.win32.basename(&#39;C:\\\\foo.HTML&#39;, &#39;.html&#39;));// 会区分大小写// &#39;foo.HTML&#39;</span></span>
<span class="line"><span>// console.log(process.env.PATH);// 环境变量</span></span>
<span class="line"><span>// console.log(path.delimiter)// 多个路径定界符</span></span>
<span class="line"><span>// console.log(process.env.PATH.split(path.delimiter))// 环境变量用分隔符切割</span></span>
<span class="line"><span>// console.log(path.posix.dirname(&#39;/foo/bar/baz/asdf/quux&#39;));// 返回父目录 &#39;/foo/bar/baz/asdf&#39;</span></span>
<span class="line"><span>// 返回扩展名</span></span>
<span class="line"><span>// console.log(path.extname(&#39;index.html&#39;));// &#39;.html&#39;</span></span>
<span class="line"><span>// console.log(path.extname(&#39;index.coffee.md&#39;));// &#39;.md&#39;</span></span>
<span class="line"><span>// console.log(path.extname(&#39;index.&#39;));// &#39;.&#39;</span></span>
<span class="line"><span>// console.log(path.extname(&#39;index&#39;));// &#39;&#39;</span></span>
<span class="line"><span>// console.log(path.extname(&#39;.index&#39;));// &#39;&#39;</span></span>
<span class="line"><span>// console.log(path.extname(&#39;.index.md&#39;));// &#39;.md&#39;</span></span>
<span class="line"><span>// 对象转路径字符串</span></span>
<span class="line"><span>// console.log(path.posix.format({</span></span>
<span class="line"><span>//     root: &#39;/ignored&#39;,</span></span>
<span class="line"><span>//     dir: &#39;/home/user/dir&#39;,</span></span>
<span class="line"><span>//     base: &#39;file.txt&#39;,</span></span>
<span class="line"><span>// }));// 如果提供了\`dir\`、\`root\`和\`base\`，则返回\`\${dir}\${path.sep}\${base}\`。“root”被忽略。// &#39;/home/user/dir/file.txt&#39;</span></span>
<span class="line"><span>// // 如果没有指定\`dir\`，将使用\`root\`, 如果只提供了\`root\`或者\`dir\`等于\`root\`，那么将不包括平台分隔符。“ext”将被忽略。</span></span>
<span class="line"><span>// console.log(path.posix.format({</span></span>
<span class="line"><span>//     root: &#39;/&#39;,</span></span>
<span class="line"><span>//     base: &#39;file.txt&#39;,</span></span>
<span class="line"><span>//     ext: &#39;ignored&#39;,</span></span>
<span class="line"><span>// }));// &#39;/file.txt&#39;</span></span>
<span class="line"><span>// // 如果没有指定base，将使用name + ext。</span></span>
<span class="line"><span>// console.log(path.posix.format({</span></span>
<span class="line"><span>//     root: &#39;/&#39;,</span></span>
<span class="line"><span>//     name: &#39;file&#39;,</span></span>
<span class="line"><span>//     ext: &#39;.txt&#39;,</span></span>
<span class="line"><span>// }));// &#39;/file.txt&#39;</span></span>
<span class="line"><span>// // 如果没有在“ext”中指定点，则将添加点</span></span>
<span class="line"><span>// console.log(path.posix.format({</span></span>
<span class="line"><span>// root: &#39;/&#39;,</span></span>
<span class="line"><span>// name: &#39;file&#39;,</span></span>
<span class="line"><span>// ext: &#39;txt&#39;,</span></span>
<span class="line"><span>// }));// &#39;/file.txt&#39;</span></span>
<span class="line"><span>// console.log(path.win32.format({</span></span>
<span class="line"><span>//     dir: &#39;C:\\\\path\\\\dir&#39;,</span></span>
<span class="line"><span>//     base: &#39;file.txt&#39;,</span></span>
<span class="line"><span>// }));// &#39;C:\\\\path\\\\dir\\\\file.txt&#39;</span></span>
<span class="line"><span>// 判断路径是否为绝对路径</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;/foo/bar&#39;)); // true</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;/baz/..&#39;));  // true</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;qux/&#39;));     // false</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;.&#39;));        // false</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;//server&#39;));    // true</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;\\\\\\\\server&#39;));  // true</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;C:/foo/..&#39;));   // true</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;C:\\\\foo\\\\..&#39;)); // true</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;bar\\\\baz&#39;));    // false</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;bar/baz&#39;));     // false</span></span>
<span class="line"><span>// console.log(path.isAbsolute(&#39;.&#39;));           // false</span></span>
<span class="line"><span>// 规范化生成路径</span></span>
<span class="line"><span>// console.log(path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;, &#39;quux&#39;, &#39;..&#39;));// &#39;/foo/bar/baz/asdf&#39;</span></span>
<span class="line"><span>// console.log(path.join(&#39;foo&#39;, {}, &#39;bar&#39;));// Throws &#39;TypeError: Path must be a string. Received {}&#39;</span></span>
<span class="line"><span>// 规范化给定路径（去除多斜杠）</span></span>
<span class="line"><span>// console.log(path.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;));// &#39;/foo/bar/baz/asdf&#39;</span></span>
<span class="line"><span>// console.log(path.normalize(&#39;C:\\\\temp\\\\\\\\foo\\\\bar\\\\..\\\\&#39;));// &#39;C:\\\\temp\\\\foo\\\\&#39;</span></span>
<span class="line"><span>// console.log(path.win32.normalize(&#39;C:////temp\\\\\\\\/\\\\/\\\\/foo/bar&#39;));// &#39;C:\\\\temp\\\\foo\\\\bar&#39;</span></span>
<span class="line"><span>// 路径转对象</span></span>
<span class="line"><span>// console.log(path.parse(&#39;/home/user/dir/file.txt&#39;));</span></span>
<span class="line"><span>// console.log(path.parse(&#39;C:\\\\path\\\\dir\\\\file.txt&#39;));</span></span>
<span class="line"><span>// 返回从 from 到 to 的相对路径</span></span>
<span class="line"><span>// console.log(path.relative(&#39;/data/orandea/test/aaa&#39;, &#39;/data/orandea/impl/bbb&#39;));// &#39;../../impl/bbb&#39;</span></span>
<span class="line"><span>// console.log(path.relative(&#39;C:\\\\orandea\\\\test\\\\aaa&#39;, &#39;C:\\\\orandea\\\\impl\\\\bbb&#39;));// &#39;..\\\\..\\\\impl\\\\bbb&#39;</span></span>
<span class="line"><span>// 多个路径解析成绝对路径</span></span>
<span class="line"><span>// console.log(path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;));// &#39;/foo/bar/baz&#39;</span></span>
<span class="line"><span>// console.log(path.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;));// &#39;/tmp/file&#39;</span></span>
<span class="line"><span>// console.log(path.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;));// 相对当前目录</span></span>
<span class="line"><span>console.log(path.posix.sep)// 文件分隔符</span></span>
<span class="line"><span>console.log(path.win32.sep)// 文件分隔符</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const r=n(e,[["render",p],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/article/2lgzkwxl/","title":"021path","lang":"zh-CN","frontmatter":{"title":"021path","createTime":"2024/03/17 08:35:35","permalink":"/article/2lgzkwxl/"},"headers":[],"readingTime":{"minutes":5.66,"words":1699},"git":{"updatedTime":1737255104000,"contributors":[{"name":"jqh","username":"jqh","email":"1789622669@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/e51d6bd9179d8251507631920dbee86805db2675024268e3d9894ba170e9c314?d=retro"}]},"filePathRelative":"2024/前端/node/021path.md","categoryList":[{"id":"07811d","sort":10001,"name":"2024"},{"id":"d1a041","sort":10007,"name":"前端"},{"id":"9e26c9","sort":10011,"name":"node"}],"bulletin":false}');export{r as comp,v as data};
