import{_ as s,c as l,a,o as n}from"./app-CiQOVv9k.js";const e={};function t(d,i){return n(),l("div",null,i[0]||(i[0]=[a(`<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include预处理命令，用来引入头文件</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">printf函数在stdio.h(标准输入输出头文件) 中 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;&gt; 表示系统自带的库</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&quot; &quot; 表示用户自定义的库（如果自定义的库里面没有这个文件系统会自动查找自带的库）</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">C 语言入口main函数，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> argc参数个数，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> argv是参数值字符串数组（第一个是程序名，后面是参数） </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">argv</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /* 我的第一个 C 程序 */</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, World! </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="c-环境设置" tabindex="-1"><a class="header-anchor" href="#c-环境设置"><span>C 环境设置</span></a></h1><ul><li>C 编译器 <ul><li>UNIX/Linux 上：<code>gcc -v</code></li><li>Mac OS 上：<code>gcc -v</code></li><li>Windows 上<a href="https://www.runoob.com/cprogramming/c-environment-setup.html" target="_blank" rel="noopener noreferrer">安装MinGW</a></li></ul></li><li><a href="https://code.visualstudio.com/docs/languages/cpp" target="_blank" rel="noopener noreferrer">工具vscode</a></li></ul><h1 id="编译-执行-c-程序" tabindex="-1"><a class="header-anchor" href="#编译-执行-c-程序"><span>编译 &amp; 执行 C 程序</span></a></h1><ul><li><p>源代码：<code>hello.c</code></p></li><li><p>编译：<code>gcc hello.c</code>，会生成一个可执行文件<code>hello.out</code>or<code>hello.exe</code>（每个平台名字有差异）</p></li><li><p>执行文件：<code>./hello.out</code></p></li><li><p>多文件一起编译：<code>gcc test1.c test2.c -o main.out</code></p></li><li><p>运行：<code>./main.out</code></p></li><li><p><code>gcc [源文件名] -o [目标文件名]</code></p></li></ul><h1 id="c-数据类型" tabindex="-1"><a class="header-anchor" href="#c-数据类型"><span>C 数据类型</span></a></h1><ul><li>基础数据类型 <ul><li>整型（int）</li><li>字符型（char）</li><li>浮点型（float）：<code>#include &lt;float.h&gt;</code></li><li>双精度浮点型（double） <ul><li><code>sizeof(float)</code>函数：<code>#include &lt;limits.h&gt;</code></li></ul></li></ul></li><li>枚举类型</li><li>void 类型 <ul><li>函数返回为空</li><li>函数参数为空</li><li>指针指向 void <ul><li>类型为 <code>void *</code> 的指针代表对象的地址，而不是类型</li></ul></li></ul></li><li>派生类型 <ul><li>数组类型</li><li>指针类型</li><li>结构体类型</li></ul></li><li>类型转换：将一个数据类型的值转换为另一种数据类型的值 <ul><li>隐式类型转换：在表达式中自动发生的，将一种较小的类型自动转换为较大的类型</li><li>显式类型转换：需要使用强制类型转换运算符（type casting operator），它可以将一个数据类型的值强制转换为另一种数据类型的值</li></ul></li></ul><h1 id="c-变量" tabindex="-1"><a class="header-anchor" href="#c-变量"><span>C 变量</span></a></h1><ul><li><p>变量其实只不过是程序可操作的存储区的名称</p><ul><li>定义整型变量age：<code>int age;</code></li><li>定义字符型变量grade：<code>char grade;</code></li><li>定义整型指针变量ptr：<code>int *ptr;</code></li><li>定义字符型变量grade：<code>char grade;</code></li><li>定义bool类型<code>bool flag = false;</code>（<code>&lt;stdbool.h&gt;</code>）</li></ul></li><li><p>全局变量保存在内存的全局存储区中，占用静态的存储单元；</p></li><li><p>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。</p></li></ul>`,9)]))}const h=s(e,[["render",t],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/article/4o35lruw/","title":"c","lang":"zh-CN","frontmatter":{"title":"c","createTime":"2024/03/22 07:00:16","permalink":"/article/4o35lruw/"},"headers":[],"readingTime":{"minutes":1.94,"words":583},"git":{"updatedTime":1737255104000,"contributors":[{"name":"jqh","username":"jqh","email":"1789622669@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/e51d6bd9179d8251507631920dbee86805db2675024268e3d9894ba170e9c314?d=retro"}]},"filePathRelative":"2024/其他/c/c.md","categoryList":[{"id":"07811d","sort":10001,"name":"2024"},{"id":"7587db","sort":10002,"name":"其他"},{"id":"84875b","sort":10015,"name":"c"}],"bulletin":false}');export{h as comp,c as data};
